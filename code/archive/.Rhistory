## ------------------------------------------------------------------------------------------------------------------------------------------
# plot theftrate against no_health_ins
p2 = theft_train %>% select(-fips, -state, -county) %>%
ggplot(aes(x = no_health_ins, y = theftrate)) +
geom_point(alpha = 0.6) +
scale_x_log10() +
scale_y_log10() +
geom_smooth(method = "lm", formula = "y~x", se = FALSE) +
labs(x = "No Health Insurance",
y = "Theft Rate",
title = "No Health Insurance vs Theft Rate") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5,size=10,face="bold"))+
theme(axis.title = element_text(size = 10))+
theme(axis.title.y = element_blank())
p2
## ------------------------------------------------------------------------------------------------------------------------------------------
# plot theftrate against pertrump
p3 = theft_train %>% select(-fips, -state, -county)%>%
ggplot(aes(x = pertrump, y = theftrate)) +
geom_point(alpha = 0.6) +
scale_x_log10() +
scale_y_log10() +
geom_smooth(method = "lm", formula = "y~x", se = FALSE) +
labs(x = "Percent of Trump Supporters",
y = "Theft Rate",
title = "Percent of Trump Supporters\n (in 2020) vs Theft Rate") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5,size=10,face="bold"))+
theme(axis.title = element_text(size = 10))
p3
## ------------------------------------------------------------------------------------------------------------------------------------------
# plot theftrate against PctEmpFIRE
p4 = theft_train %>% select(-fips, -state, -county)%>%
ggplot(aes(x = PctEmpFIRE, y = theftrate)) +
geom_point(alpha = 0.6) +
scale_x_log10() +
scale_y_log10() +
geom_smooth(method = "lm", formula = "y~x", se = FALSE) +
labs(x = "Percent of People Employed in FIRE",
y = "Theft Rate",
title = "Percent of People Employed in\n Finance/Insurance/Real Estate(FIRE)\n vs Theft Rate") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5,size=10,face="bold"))+
theme(axis.title = element_text(size = 10))+
theme(axis.title.y = element_blank())
p4
## ------------------------------------------------------------------------------------------------------------------------------------------
# plot theftrate against unemp_bens_possible
p5 = theft_train %>% select(-fips, -state, -county)%>%
ggplot(aes(x = unemp_bens_possible, y = theftrate)) +
geom_point(alpha = 0.6) +
scale_x_log10() +
scale_y_log10() +
geom_smooth(method = "lm", formula = "y~x", se = FALSE) +
labs(x = "State unemployment insurance",
y = "Theft Rate",
title = "State Unemployment Insurance\n vs Theft Rate") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5,size=10,face="bold"))+
theme(axis.title = element_text(size = 10))
p5
## ------------------------------------------------------------------------------------------------------------------------------------------
# plot theftrate against police_funding_score
p6= theft_train %>% select(-fips, -state, -county)%>%
ggplot(aes(x = police_funding_score, y = theftrate)) +
geom_point(alpha = 0.6) +
scale_x_log10() +
scale_y_log10() +
geom_smooth(method = "lm", formula = "y~x", se = FALSE) +
labs(x = "Police Funding Score",
y = "Theft Rate",
title = "Police Funding Score vs Theft Rate") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5,size=10,face="bold"))+
theme(axis.title = element_text(size = 10))+
theme(axis.title.y = element_blank())
p6
## ------------------------------------------------------------------------------------------------------------------------------------------
imp_vars_vs_theft = plot_grid(p1, p2,p3, p4,p5, p6, nrow = 3)
ggsave(filename = "../results/imp_vars_vs_theft.png",
plot = imp_vars_vs_theft,
device = "png",
width = 7,
height = 4)
# run all steps of the analysis pipeline
set.seed(471)
setwd("C:/Users/Mason Shihab/Documents/MBDS/471/final-project-template/code")
#setwd("/Users/diyangchu/Documents/2-grad@Penn/STAT471/theft-crime-2020/code")
source("1-cleaning.R")
source("2.1-imputation.R")
source("2.2-cleaning2.R")
source("2.3-train-test-split.R")
source("2-exploration.R")
source("4-regression-modeling.R")
source("5-tree-modeling.R")
source("6-model-evaluation.R")
options(scipen = 0, digits = 3)  # controls number of significant digits printed
library(tidyverse)
library(kableExtra)
read_tsv("../results/model-evaluation.tsv")
# run all steps of the analysis pipeline
set.seed(471)
setwd("C:/Users/Mason Shihab/Documents/MBDS/471/final-project-template/code")
#setwd("/Users/diyangchu/Documents/2-grad@Penn/STAT471/theft-crime-2020/code")
source("1-cleaning.R")
source("2.1-imputation.R")
source("2.2-cleaning2.R")
source("2.3-train-test-split.R")
source("2-exploration.R")
source("4-regression-modeling.R")
source("5-tree-modeling.R")
source("6-model-evaluation.R")
options(scipen = 0, digits = 3)  # controls number of significant digits printed
library(tidyverse)
library(kableExtra)
read_tsv("../results/model-evaluation.tsv")
mplot = tibble(mtries = mvalues, oob_err = oob_errors) %>%
ggplot(aes(x = mtries, y = oob_err)) +
geom_line() + geom_point() +
scale_x_continuous(breaks = mvalues) + labs(y = "Out of Bag Error", x = "Features Available per Split (m)") +
theme_bw()
lowest_m = mtries[mtries$mvalues == min(mtries$oob_errors), ]
mtries = tibble(m = mvalues, oob_err = oob_errors)
mplot = mtries %>%
ggplot(aes(x = m, y = oob_err)) +
geom_line() + geom_point() +
scale_x_continuous(breaks = mvalues) + labs(y = "Out of Bag Error", x = "Features Available per Split (m)") +
theme_bw()
lowest_m = mtries[mtries$mvalues == min(mtries$oob_errors), ]
lowest_m = mtries[mtries$m == min(mtries$oob_errors), ]
min(mtries$oob_errors)
mtries
lowest_m = mtries[mtries$m == minimum(mtries$oob_errors), ]
lowest_m = mtries[mtries$m == minimum(mtries$oob_err), ]
lowest_m = mtries[mtries$m == min(mtries$oob_err), ]
lowest_m
min(mtries$oob_err)
a <- mtries[which.min(mtries$oob_err),][,2]
b <- order(mtries[,1],decreasing=T)[1]
b
a <- mtries[which.min(mtries$oob_err),][,2]
b <- order(mtries[,1],increasing=T)[1]
b
lowest_m = mtries[mtries$m == min(mtries$oob_err), ]
lowest_m
lowest_m = mtries[,mtries$m == min(mtries$oob_err)]
lowest_m = mtries[min(mtries$oob_err), ]
lowest_m = mtries[mtries$oob_err == min(mtries$oob_err), ]
lowest_m
lowest_m = mtries[mtries$oob_err == min(mtries$oob_err), ]
lowest_m_row = mtries[mtries$oob_err == min(mtries$oob_err), ]
lowest_m = lowest_m_row$m
lowest_m
getwd()
source("5-tree-modeling.R")
source("6-model-evaluation.R")
library(dplyr)
library(lubridate)
library(tidyverse)
library(ggplot2)
library(readr)
library(readxl)
library(usdata)
library(tm)
library(stringr)
library(gbm)
library(glmnetUtils)
library(randomForest)
library(cowplot)
set.seed(471)
#RandomForest
## ---- cache=TRUE---------------------------------------------------------------------------------------------------------------------------
set.seed(471) # set seed for reproducibility
mvalues = seq(8,18, by = 1)
oob_errors = numeric(length(mvalues))
ntree = 500
for(idx in 1:length(mvalues)){
m = mvalues[idx]
rf_fit = randomForest(theftrate ~. -fips -state - county, mtry = m, data = theft_train)
oob_errors[idx] = rf_fit$mse[ntree]
}
mtries = tibble(m = mvalues, oob_err = oob_errors)
mplot = mtries %>%
ggplot(aes(x = m, y = oob_err)) +
geom_line() + geom_point() +
scale_x_continuous(breaks = mvalues) + labs(y = "Out of Bag Error", x = "Features Available per Split (m)") +
theme_bw()
lowest_m_row = mtries[mtries$oob_err == min(mtries$oob_err), ]
lowest_m = lowest_m_row$m
ggsave(filename = "../results/mplot.png",
plot = mplot,
device = "png",
width = 6,
height = 4)
## ------------------------------------------------------------------------------------------------------------------------------------------
set.seed(471)
rf_lowest_m = randomForest(theftrate ~. -fips -state - county, mtry = lowest_m, data = theft_train)
## ------------------------------------------------------------------------------------------------------------------------------------------
oob_lowest_m = tibble(ntree = 1:500, oob_err = rf_lowest_m$mse)
treeplot = oob_lowest_m %>%
ggplot(aes(x = ntree, y = oob_err)) +
geom_line() + labs(y = "Out of Bag Error", x = "Number of Trees Used") + theme_bw()
ggsave(filename = "../results/treeplot.png",
plot = treeplot,
device = "png",
width = 6,
height = 4)
## ----cache=TRUE----------------------------------------------------------------------------------------------------------------------------
set.seed(471) # set seed for reproducibility
rf_opt = randomForest(theftrate ~ .-fips -state -county, mtry = rf_lowest_m, ntree = 500, data = theft_train, importance = TRUE)
save(rf_opt, file = "../results/rf_opt.Rda")
## ----varimp, echo = TRUE, fig.width = 11, fig.height = 6, out.width = "100%", fig.align='center', fig.cap = "Variable Importance Plot for the optimal random forest model.", fig.pos = "H"----
png(width = 6,
height = 4,
res = 300,
units = "in",
filename = "../results/varImpPlot.png")
varImpPlot(rf_opt, n.var = 10)
dev.off()
#Boosting
## ----cache=TRUE----------------------------------------------------------------------------------------------------------------------------
set.seed(471) # for reproducibility (DO NOT CHANGE)
# TODO: Fit random forest with interaction depth 1
gbm_1 = gbm(theftrate ~ . -fips -state -county,
distribution = "gaussian",
n.trees = 1000,
interaction.depth = 1,
shrinkage = 0.1,
cv.folds = 5,
data = theft_train)
set.seed(471) # for reproducibility (DO NOT CHANGE)
# TODO: Fit random forest with interaction depth 2
gbm_2 = gbm(theftrate ~ . -fips -state -county,
distribution = "gaussian",
n.trees = 1000,
interaction.depth = 2,
shrinkage = 0.1,
cv.folds = 5,
data = theft_train)
set.seed(471) # for reproducibility (DO NOT CHANGE)
# TODO: Fit random forest with interaction depth 3
gbm_3 = gbm(theftrate ~ . -fips -state -county,
distribution = "gaussian",
n.trees = 1000,
interaction.depth = 3,
shrinkage = 0.1,
cv.folds = 5,
data = theft_train)
## ------------------------------------------------------------------------------------------------------------------------------------------
ntrees = 1000
cv_errors = bind_rows(
tibble(ntree = 1:ntrees, cv_err = gbm_1$cv.error, Depth = 1),
tibble(ntree = 1:ntrees, cv_err = gbm_2$cv.error, Depth = 2),
tibble(ntree = 1:ntrees, cv_err = gbm_3$cv.error, Depth = 3)
) %>% mutate(Depth = factor(Depth))
# plot CV errors
mins = cv_errors %>% group_by(Depth) %>% summarise(min_err = min(cv_err))
## ----deptherr, echo = TRUE, fig.width = 5, fig.height = 3, out.width = "100%", fig.align='center', fig.cap = "CV Error by Trees and Interaction Depth (with min error for each depth dashed)", fig.pos = "H"----
cverrplot = cv_errors %>%
ggplot(aes(x = ntree, y = cv_err, colour = Depth)) +
geom_line() + theme_bw() +
geom_hline(aes(yintercept = min_err, color = Depth),
data = mins, linetype = "dashed") +
labs(y = "CV Error", x = "Trees") + scale_y_log10()
ggsave(filename = "../results/cverrplot.png",
plot = cverrplot,
device = "png",
width = 6,
height = 4)
## ----relinf--------------------------------------------------------------------------------------------------------------------------------
gbm_fit_optimal = gbm_3
optimal_num_trees = gbm.perf(gbm_fit_optimal, plot.it = FALSE)
save(gbm_fit_optimal, file = "../results/gbm_fit_optimal.Rda")
summary(gbm_3, n.trees = optimal_num_trees, plotit = FALSE) %>% tibble() %>%
head(12)  %>%
write_tsv("../results/gbm_opt_rel_imp.tsv")
## ------------------------------------------------------------------------------------------------------------------------------------------
housing = plot(gbm_3, i.var = "housing_density",
n.trees = optimal_num_trees)
## ------------------------------------------------------------------------------------------------------------------------------------------
FIRE = plot(gbm_3, i.var = "PctEmpFIRE",
n.trees = optimal_num_trees)
## ------------------------------------------------------------------------------------------------------------------------------------------
trump = plot(gbm_3, i.var = "pertrump", n.trees =
optimal_num_trees)
## ------------------------------------------------------------------------------------------------------------------------------------------
bens = plot(gbm_3, i.var = "unemp_bens_possible", n.trees =
optimal_num_trees)
## ------------------------------------------------------------------------------------------------------------------------------------------
police = plot(gbm_3, i.var = "police_funding_score", n.trees =
optimal_num_trees)
## ------------------------------------------------------------------------------------------------------------------------------------------
healthins = plot(gbm_3, i.var = "no_health_ins", n.trees =
optimal_num_trees)
## ------------------------------------------------------------------------------------------------------------------------------------------
rel_imp_plots = plot_grid(nrow = 2, housing, bens, healthins, police, trump, FIRE)
ggsave(filename = "../results/rel_imp_plots.png",
plot = rel_imp_plots,
device = "png",
width = 7,
height = 4)
typeof(lowest_m)
source("6-model-evaluation.R")
options(scipen = 0, digits = 3)  # controls number of significant digits printed
library(tidyverse)
library(kableExtra)
read_tsv("../results/model-evaluation.tsv")
rf_opt
options(scipen = 0, digits = 3)  # controls number of significant digits printed
library(tidyverse)
library(kableExtra)
knitr::include_graphics("../results/response-histogram.png")
options(scipen = 0, digits = 3)  # controls number of significant digits printed
library(tidyverse)
library(kableExtra)
read_tsv("../results/top-10-counties-data.tsv") %>%
kable(format = "latex", row.names = NA,
booktabs = TRUE, digits = 2,
col.names = c("County", "State", "Case-fatality rate"),
caption = "Top ten counties by case-fatality rate
(expressed as a percentage).") %>%
kable_styling(position = "center")
knitr::include_graphics("../results/lasso-cv-plot.png")
knitr::include_graphics("../results/lasso-trace-plot.png")
read_tsv("../results/lasso-features-table.tsv") %>%
kable(format = "latex", row.names = NA,
booktabs = TRUE, digits = 2,
col.names = c("Feature", "Coefficient"),
caption = "Standardized coefficients for features in the lasso
model based on the one-standard-error rule.") %>%
kable_styling(position = "center")
read_tsv("../results/model-evaluation.tsv") %>%
kable(format = "latex", row.names = NA,
booktabs = TRUE, digits = 6,
caption = "Root-mean-squared prediction errors for lasso and ridge regressions.") %>%
kable_styling(position = "center")
read_tsv("../results/model-evaluation.tsv")
rf_opt
options(scipen = 0, digits = 3)  # controls number of significant digits printed
library(tidyverse)
library(kableExtra)
read_tsv("../results/top-10-counties-data.tsv") %>%
kable(format = "latex", row.names = NA,
booktabs = TRUE, digits = 2,
col.names = c("County", "State", "Case-fatality rate"),
caption = "Top ten counties by case-fatality rate
(expressed as a percentage).") %>%
kable_styling(position = "center")
knitr::include_graphics("../results/lasso-cv-plot.png")
knitr::include_graphics("../results/lasso-trace-plot.png")
read_tsv("../results/lasso-features-table.tsv") %>%
kable(format = "latex", row.names = NA,
booktabs = TRUE, digits = 2,
col.names = c("Feature", "Coefficient"),
caption = "Standardized coefficients for features in the lasso
model based on the one-standard-error rule.") %>%
kable_styling(position = "center")
read_tsv("../results/model-evaluation.tsv") %>%
kable(format = "latex", row.names = NA,
booktabs = TRUE, digits = 6,
caption = "Root-mean-squared prediction errors for lasso and ridge regressions.") %>%
kable_styling(position = "center")
read_tsv("../results/model-evaluation.tsv")
set.seed(471) # set seed for reproducibility
rf_opt = randomForest(theftrate ~ .-fips -state -county, mtry = lowest_m, ntree = 500, data = theft_train, importance = TRUE)
save(rf_opt, file = "../results/rf_opt.Rda")
options(scipen = 0, digits = 3)  # controls number of significant digits printed
library(tidyverse)
library(kableExtra)
read_tsv("../results/top-10-counties-data.tsv") %>%
kable(format = "latex", row.names = NA,
booktabs = TRUE, digits = 2,
col.names = c("County", "State", "Case-fatality rate"),
caption = "Top ten counties by case-fatality rate
(expressed as a percentage).") %>%
kable_styling(position = "center")
knitr::include_graphics("../results/lasso-cv-plot.png")
knitr::include_graphics("../results/lasso-trace-plot.png")
read_tsv("../results/lasso-features-table.tsv") %>%
kable(format = "latex", row.names = NA,
booktabs = TRUE, digits = 2,
col.names = c("Feature", "Coefficient"),
caption = "Standardized coefficients for features in the lasso
model based on the one-standard-error rule.") %>%
kable_styling(position = "center")
read_tsv("../results/model-evaluation.tsv") %>%
kable(format = "latex", row.names = NA,
booktabs = TRUE, digits = 6,
caption = "Root-mean-squared prediction errors for lasso and ridge regressions.") %>%
kable_styling(position = "center")
read_tsv("../results/model-evaluation.tsv")
rf_opt
source("6-model-evaluation.R")
read_tsv("../results/model-evaluation.tsv")
source("6-model-evaluation.R")
options(scipen = 0, digits = 3)  # controls number of significant digits printed
library(tidyverse)
library(kableExtra)
read_tsv("../results/model-evaluation.tsv")
# run all steps of the analysis pipeline
set.seed(471)
setwd("C:/Users/Mason Shihab/Documents/MBDS/471/final-project-template/code")
#setwd("/Users/diyangchu/Documents/2-grad@Penn/STAT471/theft-crime-2020/code")
source("1-cleaning.R")
source("2.1-imputation.R")
source("2.2-cleaning2.R")
source("2.3-train-test-split.R")
source("2-exploration.R")
source("4-regression-modeling.R")
source("5-tree-modeling.R")
source("6-model-evaluation.R")
options(scipen = 0, digits = 3)  # controls number of significant digits printed
library(tidyverse)
library(kableExtra)
read_tsv("../results/model-evaluation.tsv")
# run all steps of the analysis pipeline
set.seed(471)
setwd("C:/Users/Mason Shihab/Documents/MBDS/471/final-project-template/code")
#setwd("/Users/diyangchu/Documents/2-grad@Penn/STAT471/theft-crime-2020/code")
source("1-cleaning.R")
source("2.1-imputation.R")
source("2.2-cleaning2.R")
source("2.3-train-test-split.R")
source("2-exploration.R")
source("4-regression-modeling.R")
source("5-tree-modeling.R")
source("6-model-evaluation.R")
options(scipen = 0, digits = 3)  # controls number of significant digits printed
library(tidyverse)
library(kableExtra)
read_tsv("../results/model-evaluation.tsv")
options(scipen = 0, digits = 3)  # controls number of significant digits printed
library(tidyverse)
library(kableExtra)
read_tsv("../results/model-evaluation.tsv") %>%
kable(format = "latex", row.names = NA,
booktabs = TRUE, digits = 6,
caption = "Root-mean-squared prediction errors for lasso and ridge regressions.") %>%
kable_styling(position = "center")
## ----setup, include=FALSE------------------------------------------------------------------------------------------------------------------
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(lubridate)
library(tidyverse)
library(ggplot2)
library(readr)
library(readxl)
library(stringr)
library(glmnetUtils) # boosting
library(randomForest)
library(cowplot)
set.seed(471)
## ------------------------------------------------------------------------------------------------------------------------------------------
# install.packages("scales")              # dependency of plot_glmnet
source("functions/plot_glmnet.R")
## ------------------------------------------------------------------------------------------------------------------------------------------
theft_train = read_csv("../data/clean/theft_train.csv")
theft_test = read_csv("../data/clean/theft_test.csv")
#Ridge
## ----cache=TRUE----------------------------------------------------------------------------------------------------------------------------
set.seed(471) # set seed for reproducibility
ridge_fit = cv.glmnet(theftrate ~ .-fips -state -county,  # formula notation, as usual
alpha = 0,                 # alpha = 0 for ridge
nfolds = 10,               # number of folds
data = theft_train)   # data to run ridge on
# save the ridge fit object
save(ridge_fit, file = "../results/ridge_fit.Rda")
## ------------------------------------------------------------------------------------------------------------------------------------------
png(width = 6,
height = 4,
res = 300,
units = "in",
filename = "../results/ridge-cv-plot.png")
plot(ridge_fit)
dev.off()
## ------------------------------------------------------------------------------------------------------------------------------------------
ridgeplot = plot_glmnet(ridge_fit, theft_train, features_to_plot = 8)
ggsave(filename = "../results/ridge-trace-plot.png",
plot = ridgeplot,
device = "png",
width = 6,
height = 4)
set.seed(471)
## ------------------------------------------------------------------------------------------------------------------------------------------
extract_std_coefs(ridge_fit, theft_train) %>%
filter(coefficient != 0) %>% arrange(desc(abs(coefficient))) %>% head(10)
write_tsv("../results/ridge-features-table.tsv")
extract_std_coefs(ridge_fit, theft_train) %>%
filter(coefficient != 0) %>% arrange(desc(abs(coefficient))) %>%
write_tsv("../results/ridge-features-table.tsv")
ridge_coef = extract_std_coefs(ridge_fit, theft_train) %>%
filter(coefficient != 0) %>% arrange(desc(abs(coefficient))) %>% head(10)
ridge_coef
## ------------------------------------------------------------------------------------------------------------------------------------------
ridge_coef = extract_std_coefs(ridge_fit, theft_train) %>%
filter(coefficient != 0) %>% arrange(desc(abs(coefficient))) %>% head(10) %>% as.data.frame()
ridge_coef = extract_std_coefs(ridge_fit, theft_train) %>%
filter(coefficient != 0) %>% arrange(desc(abs(coefficient))) %>% head(10) %>% as.data.frame()
ridge_coef %>% write_tsv("../results/ridge-features-table.tsv")
# run all steps of the analysis pipeline
set.seed(471)
setwd("C:/Users/Mason Shihab/Documents/MBDS/471/final-project-template/code")
#setwd("/Users/diyangchu/Documents/2-grad@Penn/STAT471/theft-crime-2020/code")
source("1-cleaning.R")
source("2.1-imputation.R")
source("2.2-cleaning2.R")
source("2.3-train-test-split.R")
source("2-exploration.R")
source("4-regression-modeling.R")
source("5-tree-modeling.R")
source("6-model-evaluation.R")
