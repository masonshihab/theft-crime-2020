setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(lubridate)
library(tidyverse)
library(ggplot2)
library(readr)
library(readxl)
library(usdata)
library(tm)
library(stringr)
library(kableExtra)
library(corrplot)
library(cowplot)
theft_alldata=read_csv("../data/clean/dataclean.csv")
theft_train=read_csv("../data/clean/theft_train.csv")
theft_train %>% ggplot(aes(x = theftrate)) +
geom_histogram()+
labs(y = "Count",
x = "Theft Rate",
title = "Histogram of Theft Rate")+
geom_vline(aes(xintercept = mean(theftrate),colour = "mean"),
linetype ="longdash", size = .8)+
geom_vline(aes(xintercept = median(theftrate),colour = "median"),
linetype ="longdash", size = .8)+
theme_bw()+
scale_y_log10()+
scale_color_manual(name = "statistics", values = c(median = "blue", mean = "red"))+
theme(plot.title = element_text(hjust = 0.5))
mean(theft_train$theftrate)
median(theft_train$theftrate)
theft_train %>% select(state,county,theftrate) %>% arrange(desc(theftrate)) %>% head(10) %>%
kable(format = "latex", row.names = NA,
booktabs = TRUE,
digits = 5,
col.names = c("State", "County","Theft Rate"),
caption = "This a table showing the top 10 counties with the highest theft rate.") %>%
kable_styling(position = "center") %>%
kable_styling(latex_options = "HOLD_position")
map_data("county") %>%
as_tibble() %>%
left_join(theft_train %>%
rename(region = state,
subregion = county,
`Theft Rate` = theftrate) %>%
mutate(region = str_to_lower(region),
subregion = str_to_lower(subregion)),
by = c("region", "subregion")) %>%
ggplot() +
geom_polygon(data=map_data("state"),
aes(x=long, y=lat, group=group),
color="black", fill=NA,  size = 1, alpha = .3) +
geom_polygon(aes(x=long, y=lat, group=group, fill = `Theft Rate`),
color="darkblue", size = .1) +
scale_fill_gradient(low = "blue", high = "red") +
theme_void()
theft_train_corrAll = theft_train%>% select(-fips, -state, -county,-theftrate)
M = cor(theft_train_corrAll)
corrplot(M, type = 'lower', order = 'hclust', tl.col = 'black',
cl.ratio = 0.2, tl.srt = 45, col = COL2('PuOr', 10), tl.cex = 0.35)
cluster_safetynet = theft_train%>% select(-fips, -state, -county) %>% select(unemp_bens_possible, spend_per_capita, saversperhouses, no_health_ins, foodstamp)
cluster_criminaljustice = theft_train%>% select(-fips, -state, -county) %>% select(incar_rate, police_violence_score, police_accountability_score, approach_to_policing_score, police_funding_score)
cluster_health = theft_train%>% select(-fips, -state, -county) %>% select(mean_hha_score, poor_fair_health, dis5to17, dis18to34, dis35to64)
cluster_ses = theft_train%>% select(-fips, -state, -county) %>% select(lessthan_hs, bachplus, unemployed_rate, employed_rate, med_2bed, gini, svi_overall, pct_all_in_pov, pct_child_in_pov, med_income, sev_hou_cost_burden, sev_hou_prob, PctEmpChange1920, PctEmpConstruction, PctEmpMining, PctEmpTrade, PctEmpTrans, PctEmpInformation, PctEmpFIRE, PerCapitaInc, Deep_Pov_All, Deep_Pov_Children, inschool, ingradprofesh, inundergrad)
cluster_demo= theft_train%>% select(-fips, -state, -county) %>% select(med_age,permale,divorced,widowed,nevermarried,pertrump,pop_density,housing_density,res_seg_nonwhite_white,Marriedcouplefamily,ForeignBornEuropePct,ForeignBornMexPct,ForeignBornCaribPct,ForeignBornCentralSouthAmPct,ForeignBornAsiaPct,ForeignBornAfricaPct,NonEnglishHHNum,AvgHHSize,PopChangeRate1819,withkids,single_mom,singledad,foreignborn,fromdifstate,fromabroad)
M_safetynet = cor(cluster_safetynet)
M_criminaljustice = cor(cluster_criminaljustice)
M_health = cor(cluster_health)
M_ses = cor(cluster_ses)
M_demo = cor(cluster_demo)
corrplot(M_safetynet, type = 'lower', order = 'hclust', tl.col = 'black',
cl.ratio = 0.2, tl.srt = 45, col = COL2('PuOr', 10), tl.cex = 1)
corrplot(M_criminaljustice, type = 'lower', order = 'hclust', tl.col = 'black',
cl.ratio = 0.2, tl.srt = 45, col = COL2('PuOr', 10), tl.cex = 0.8)
corrplot(M_health, type = 'lower', order = 'hclust', tl.col = 'black',
cl.ratio = 0.2, tl.srt = 45, col = COL2('PuOr', 10), tl.cex = 0.8)
corrplot(M_ses, type = 'lower', order = 'hclust', tl.col = 'black',
cl.ratio = 0.2, tl.srt = 45, col = COL2('PuOr', 10), tl.cex = 0.6)
corrplot(M_demo, type = 'lower', order = 'hclust', tl.col = 'black',
cl.ratio = 0.2, tl.srt = 45, col = COL2('PuOr', 10), tl.cex = 0.5)
# plot theftrate against housing_density
p1 = theft_train %>% select(-fips, -state, -county)%>%
ggplot(aes(x = housing_density, y = theftrate)) +
geom_point(alpha = 0.6) +
scale_x_log10() +
scale_y_log10() +
geom_smooth(method = "lm", formula = "y~x", se = FALSE) +
labs(x = "Housing Density",
y = "Theft Rate",
title = "Housing Density vs Theft Rate") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5,size=10,face="bold"))+
theme(axis.title = element_text(size = 10))
p1
# plot theftrate against no_health_ins
p2 = theft_train %>% select(-fips, -state, -county) %>%
ggplot(aes(x = no_health_ins, y = theftrate)) +
geom_point(alpha = 0.6) +
scale_x_log10() +
scale_y_log10() +
geom_smooth(method = "lm", formula = "y~x", se = FALSE) +
labs(x = "No Health Insurance",
y = "Theft Rate",
title = "No Health Insurance vs Theft Rate") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5,size=10,face="bold"))+
theme(axis.title = element_text(size = 10))+
theme(axis.title.y = element_blank())
p2
# plot theftrate against pertrump
p3 = theft_train %>% select(-fips, -state, -county)%>%
ggplot(aes(x = pertrump, y = theftrate)) +
geom_point(alpha = 0.6) +
scale_x_log10() +
scale_y_log10() +
geom_smooth(method = "lm", formula = "y~x", se = FALSE) +
labs(x = "Percent of Trump Supporters",
y = "Theft Rate",
title = "Percent of Trump Supporters\n (in 2020) vs Theft Rate") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5,size=10,face="bold"))+
theme(axis.title = element_text(size = 10))
p3
# plot theftrate against PctEmpFIRE
p4 = theft_train %>% select(-fips, -state, -county)%>%
ggplot(aes(x = PctEmpFIRE, y = theftrate)) +
geom_point(alpha = 0.6) +
scale_x_log10() +
scale_y_log10() +
geom_smooth(method = "lm", formula = "y~x", se = FALSE) +
labs(x = "Percent of People Employed in FIRE",
y = "Theft Rate",
title = "Percent of People Employed in\n Finance/Insurance/Real Estate(FIRE)\n vs Theft Rate") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5,size=10,face="bold"))+
theme(axis.title = element_text(size = 10))+
theme(axis.title.y = element_blank())
p4
# plot theftrate against unemp_bens_possible
p5 = theft_train %>% select(-fips, -state, -county)%>%
ggplot(aes(x = unemp_bens_possible, y = theftrate)) +
geom_point(alpha = 0.6) +
scale_x_log10() +
scale_y_log10() +
geom_smooth(method = "lm", formula = "y~x", se = FALSE) +
labs(x = "State unemployment insurance",
y = "Theft Rate",
title = "State Unemployment Insurance\n vs Theft Rate") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5,size=10,face="bold"))+
theme(axis.title = element_text(size = 10))
p5
# plot theftrate against police_funding_score
p6= theft_train %>% select(-fips, -state, -county)%>%
ggplot(aes(x = police_funding_score, y = theftrate)) +
geom_point(alpha = 0.6) +
scale_x_log10() +
scale_y_log10() +
geom_smooth(method = "lm", formula = "y~x", se = FALSE) +
labs(x = "Police Funding Score",
y = "Theft Rate",
title = "Police Funding Score vs Theft Rate") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5,size=10,face="bold"))+
theme(axis.title = element_text(size = 10))+
theme(axis.title.y = element_blank())
p6
plot_grid(p1, p2,p3, p4,p5, p6, nrow = 3)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(lubridate)
library(tidyverse)
library(ggplot2)
library(readr)
library(readxl)
library(usdata)
library(tm)
library(stringr)
library(gbm)
library(glmnetUtils) # boosting
library(randomForest)
library(kableExtra)
library(cowplot)
plot_cva_glmnet(elnet_fit)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(lubridate)
library(tidyverse)
library(ggplot2)
library(readr)
library(readxl)
library(usdata)
library(tm)
library(stringr)
library(gbm)
library(glmnetUtils) # boosting
library(randomForest)
library(kableExtra)
library(cowplot)
# install.packages("scales")              # dependency of plot_glmnet
source("functions/plot_glmnet.R")
theft_train = read_csv("../data/clean/theft_train.csv")
theft_test = read_csv("../data/clean/theft_test.csv")
set.seed(471) # set seed for reproducibility
ridge_fit = cv.glmnet(theftrate ~ .-fips -state -county,  # formula notation, as usual
alpha = 0,                 # alpha = 0 for ridge
nfolds = 10,               # number of folds
data = theft_train)   # data to run ridge on
plot(ridge_fit)
plot_glmnet(ridge_fit, theft_train, features_to_plot = 8)
extract_std_coefs(ridge_fit, theft_train) %>%
filter(coefficient != 0) %>% arrange(desc(abs(coefficient))) %>% head(10) %>%
kable(format = "latex", row.names = NA,
booktabs = TRUE, digits = 8,
col.names = c("Feature", "Coefficient"),
caption = "Standardized coefficients for features in the Ridge
model based on the one-standard-error rule.") %>%
kable_styling(position = "center")
set.seed(471) # set seed before cross-validation for reproducibility
lasso_fit = cv.glmnet(theftrate ~. -state -county -fips , alpha = 1, nfolds = 10, data = theft_train)
plot(lasso_fit)
lambda_lasso = lasso_fit$lambda.1se
sprintf("The value of lambda based on the one-standard-error rule: %f",
lambda_lasso)
num_features = lasso_fit$nzero[lasso_fit$lambda == lasso_fit$lambda.1se]
sprintf("The number of features (excluding intercept) selected (1se): %i",
num_features)
extract_std_coefs(lasso_fit, theft_train) %>%
filter(coefficient != 0) %>% arrange(desc(coefficient)) %>%
kable(format = "latex", row.names = NA,
booktabs = TRUE, digits = 8,
col.names = c("Feature", "Coefficient"),
caption = "Standardized coefficients for features in the Elastic Net
model based on the one-standard-error rule.") %>%
kable_styling(position = "center")
plot_glmnet(lasso_fit, theft_train)
set.seed(471)
elnet_fit = cva.glmnet(theftrate ~ .-fips -county -state, # formula notation, as usual
nfolds = 10,               # number of folds
data = theft_train)   # data to run on
elnet_fit$alpha
plot_cva_glmnet(elnet_fit)
elnet_fit_best = extract_best_elnet(elnet_fit)
elnet_fit_best$alpha
plot(elnet_fit_best)
plot_glmnet(elnet_fit_best, theft_train)
extract_std_coefs(elnet_fit_best, theft_train) %>%
filter(coefficient != 0) %>% arrange(desc(coefficient)) %>%
kable(format = "latex", row.names = NA,
booktabs = TRUE, digits = 8,
col.names = c("Feature", "Coefficient"),
caption = "Standardized coefficients for features in the Lasso
model based on the one-standard-error rule.") %>%
kable_styling(position = "center")
set.seed(471) # set seed for reproducibility
mvalues = seq(8,18, by = 1)
oob_errors = numeric(length(mvalues))
ntree = 500
for(idx in 1:length(mvalues)){
m = mvalues[idx]
rf_fit = randomForest(theftrate ~. -fips -state - county, mtry = m, data = theft_train)
oob_errors[idx] = rf_fit$mse[ntree]
}
tibble(m = mvalues, oob_err = oob_errors) %>%
ggplot(aes(x = m, y = oob_err)) +
geom_line() + geom_point() +
scale_x_continuous(breaks = mvalues) + labs(y = "Out of Bag Error", x = "Features Available per Split (m)") +
theme_bw()
set.seed(471)
rf_15 = randomForest(theftrate ~. -fips -state - county, mtry = 15, data = theft_train)
oob15 = tibble(ntree = 1:500, oob_err = rf_15$mse)
oob15 %>%
ggplot(aes(x = ntree, y = oob_err)) +
geom_line() + labs(y = "Out of Bag Error", x = "Number of Trees Used") + theme_bw()
set.seed(471) # set seed for reproducibility
rf_opt = randomForest(theftrate ~ .-fips -state -county, mtry = 15, ntree = 500, data = theft_train, importance = TRUE)
varImpPlot(rf_opt, n.var = 10)
set.seed(471) # for reproducibility (DO NOT CHANGE)
# TODO: Fit random forest with interaction depth 1
gbm_1 = gbm(theftrate ~ . -fips -state -county,
distribution = "gaussian",
n.trees = 1000,
interaction.depth = 1,
shrinkage = 0.1,
cv.folds = 5,
data = theft_train)
set.seed(471)
elnet_fit = cva.glmnet(theftrate ~ .-fips -county -state, # formula notation, as usual
nfolds = 10,               # number of folds
data = theft_train)   # data to run on
save(elnet_fit, file = "../results/elnet_fit.Rda")
alphas = plot_cva_glmnet(elnet_fit)
ggsave(filename = "../results/alphas.png",
plot = alphas,
device = "png",
width = 10,
height = 7)
rf_opt
library(dplyr)
library(lubridate)
library(tidyverse)
library(ggplot2)
library(readr)
library(readxl)
library(usdata)
library(tm)
library(stringr)
library(gbm)
library(glmnetUtils)
library(randomForest)
library(cowplot)
set.seed(471)
#RandomForest
## ---- cache=TRUE---------------------------------------------------------------------------------------------------------------------------
set.seed(471) # set seed for reproducibility
mvalues = seq(5,19, by = 1)
oob_errors = numeric(length(mvalues))
ntree = 500
for(idx in 1:length(mvalues)){
m = mvalues[idx]
rf_fit = randomForest(theftrate ~. -fips -state - county, mtry = m, data = theft_train)
oob_errors[idx] = rf_fit$mse[ntree]
}
mtries = tibble(m = mvalues, oob_err = oob_errors)
mplot = mtries %>%
ggplot(aes(x = m, y = oob_err)) +
geom_line() + geom_point() +
scale_x_continuous(breaks = mvalues) + labs(y = "Out of Bag Error", x = "Features Available per Split (m)") +
theme_bw()
lowest_m_row = mtries[mtries$oob_err == min(mtries$oob_err), ]
lowest_m = lowest_m_row$m
ggsave(filename = "../results/mplot.png",
plot = mplot,
device = "png",
width = 6,
height = 4)
## ------------------------------------------------------------------------------------------------------------------------------------------
set.seed(471)
rf_lowest_m = randomForest(theftrate ~. -fips -state - county, mtry = lowest_m, data = theft_train)
## ------------------------------------------------------------------------------------------------------------------------------------------
oob_lowest_m = tibble(ntree = 1:500, oob_err = rf_lowest_m$mse)
treeplot = oob_lowest_m %>%
ggplot(aes(x = ntree, y = oob_err)) +
geom_line() + labs(y = "Out of Bag Error", x = "Number of Trees Used") + theme_bw()
ggsave(filename = "../results/treeplot.png",
plot = treeplot,
device = "png",
width = 6,
height = 4)
## ----cache=TRUE----------------------------------------------------------------------------------------------------------------------------
set.seed(471) # set seed for reproducibility
rf_opt = randomForest(theftrate ~ .-fips -state -county, mtry = lowest_m, ntree = 500, data = theft_train, importance = TRUE)
save(rf_opt, file = "../results/rf_opt.Rda")
## ----varimp, echo = TRUE, fig.width = 11, fig.height = 6, out.width = "100%", fig.align='center', fig.cap = "Variable Importance Plot for the optimal random forest model.", fig.pos = "H"----
png(width = 11,
height = 6,
res = 300,
units = "in",
filename = "../results/varImpPlot.png")
varImpPlot(rf_opt, n.var = 10)
dev.off()
#Boosting
## ----cache=TRUE----------------------------------------------------------------------------------------------------------------------------
set.seed(471) # for reproducibility (DO NOT CHANGE)
# TODO: Fit random forest with interaction depth 1
gbm_1 = gbm(theftrate ~ . -fips -state -county,
distribution = "gaussian",
n.trees = 1000,
interaction.depth = 1,
shrinkage = 0.1,
cv.folds = 5,
data = theft_train)
set.seed(471) # for reproducibility (DO NOT CHANGE)
# TODO: Fit random forest with interaction depth 2
gbm_2 = gbm(theftrate ~ . -fips -state -county,
distribution = "gaussian",
n.trees = 1000,
interaction.depth = 2,
shrinkage = 0.1,
cv.folds = 5,
data = theft_train)
set.seed(471) # for reproducibility (DO NOT CHANGE)
# TODO: Fit random forest with interaction depth 3
gbm_3 = gbm(theftrate ~ . -fips -state -county,
distribution = "gaussian",
n.trees = 1000,
interaction.depth = 3,
shrinkage = 0.1,
cv.folds = 5,
data = theft_train)
## ------------------------------------------------------------------------------------------------------------------------------------------
ntrees = 1000
cv_errors = bind_rows(
tibble(ntree = 1:ntrees, cv_err = gbm_1$cv.error, Depth = 1),
tibble(ntree = 1:ntrees, cv_err = gbm_2$cv.error, Depth = 2),
tibble(ntree = 1:ntrees, cv_err = gbm_3$cv.error, Depth = 3)
) %>% mutate(Depth = factor(Depth))
# plot CV errors
mins = cv_errors %>% group_by(Depth) %>% summarise(min_err = min(cv_err))
## ----deptherr, echo = TRUE, fig.width = 5, fig.height = 3, out.width = "100%", fig.align='center', fig.cap = "CV Error by Trees and Interaction Depth (with min error for each depth dashed)", fig.pos = "H"----
cverrplot = cv_errors %>%
ggplot(aes(x = ntree, y = cv_err, colour = Depth)) +
geom_line() + theme_bw() +
geom_hline(aes(yintercept = min_err, color = Depth),
data = mins, linetype = "dashed") +
labs(y = "CV Error", x = "Trees") + scale_y_log10()
ggsave(filename = "../results/cverrplot.png",
plot = cverrplot,
device = "png",
width = 6,
height = 4)
## ----relinf--------------------------------------------------------------------------------------------------------------------------------
gbm_fit_optimal = gbm_3
optimal_num_trees = gbm.perf(gbm_fit_optimal, plot.it = FALSE)
save(gbm_fit_optimal, file = "../results/gbm_fit_optimal.Rda")
summary(gbm_3, n.trees = optimal_num_trees, plotit = FALSE) %>% tibble() %>%
head(12)  %>%
write_tsv("../results/gbm_opt_rel_imp.tsv")
## ------------------------------------------------------------------------------------------------------------------------------------------
bachplus = plot(gbm_3, i.var = "bachplus",
n.trees = optimal_num_trees)
## ------------------------------------------------------------------------------------------------------------------------------------------
FIRE = plot(gbm_3, i.var = "PctEmpFIRE",
n.trees = optimal_num_trees)
## ------------------------------------------------------------------------------------------------------------------------------------------
trump = plot(gbm_3, i.var = "pertrump", n.trees =
optimal_num_trees)
## ------------------------------------------------------------------------------------------------------------------------------------------
bens = plot(gbm_3, i.var = "unemp_bens_possible", n.trees =
optimal_num_trees)
## ------------------------------------------------------------------------------------------------------------------------------------------
health = plot(gbm_3, i.var = "poor_fair_health", n.trees =
optimal_num_trees)
## ------------------------------------------------------------------------------------------------------------------------------------------
dis35to64 = plot(gbm_3, i.var = "no_health_ins", n.trees =
optimal_num_trees)
## ------------------------------------------------------------------------------------------------------------------------------------------
rel_imp_plots = plot_grid(nrow = 2, bens, FIRE, bachplus, health, trump, dis35to64)
ggsave(filename = "../results/rel_imp_plots.png",
plot = rel_imp_plots,
device = "png",
width = 10,
height = 7)
set.seed(471) # set seed for reproducibility
mvalues = seq(3,17, by = 1)
oob_errors = numeric(length(mvalues))
ntree = 500
for(idx in 1:length(mvalues)){
m = mvalues[idx]
rf_fit = randomForest(theftrate ~. -fips -state - county, mtry = m, data = theft_train)
oob_errors[idx] = rf_fit$mse[ntree]
}
mtries = tibble(m = mvalues, oob_err = oob_errors)
mplot = mtries %>%
ggplot(aes(x = m, y = oob_err)) +
geom_line() + geom_point() +
scale_x_continuous(breaks = mvalues) + labs(y = "Out of Bag Error", x = "Features Available per Split (m)") +
theme_bw()
lowest_m_row = mtries[mtries$oob_err == min(mtries$oob_err), ]
lowest_m = lowest_m_row$m
ggsave(filename = "../results/mplot.png",
plot = mplot,
device = "png",
width = 6,
height = 4)
set.seed(471) # set seed for reproducibility
mvalues = seq(6,20, by = 1)
oob_errors = numeric(length(mvalues))
ntree = 500
for(idx in 1:length(mvalues)){
m = mvalues[idx]
rf_fit = randomForest(theftrate ~. -fips -state - county, mtry = m, data = theft_train)
oob_errors[idx] = rf_fit$mse[ntree]
}
mtries = tibble(m = mvalues, oob_err = oob_errors)
mplot = mtries %>%
ggplot(aes(x = m, y = oob_err)) +
geom_line() + geom_point() +
scale_x_continuous(breaks = mvalues) + labs(y = "Out of Bag Error", x = "Features Available per Split (m)") +
theme_bw()
lowest_m_row = mtries[mtries$oob_err == min(mtries$oob_err), ]
lowest_m = lowest_m_row$m
ggsave(filename = "../results/mplot.png",
plot = mplot,
device = "png",
width = 6,
height = 4)
# run all steps of the analysis pipeline
set.seed(471)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("1-cleaning.R")
source("2.1-imputation.R")
source("2.2-cleaning2.R")
source("2.3-train-test-split.R")
source("3-exploration.R")
source("4-regression-modeling.R")
source("5-tree-modeling.R")
source("6-model-evaluation.R")
mean(theft_train$theftrate)
# run all steps of the analysis pipeline
set.seed(471)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("1-cleaning.R")
source("2.1-imputation.R")
source("2.2-cleaning2.R")
source("2.3-train-test-split.R")
source("3-exploration.R")
source("4-regression-modeling.R")
source("5-tree-modeling.R")
source("6-model-evaluation.R")
theftdata = read.csv("../data/clean/dataclean.csv")
